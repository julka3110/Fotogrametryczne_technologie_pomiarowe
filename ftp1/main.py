# Form implementation generated from reading ui file 'designer3.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.




import Metashape
import os, sys, time
from PyQt6 import QtCore, QtGui, QtWidgets

app: Metashape.Application = Metashape.Application()
document: Metashape.Document = Metashape.app.document
chunk: Metashape.Chunk = document.chunk

def find_files(folder, types):
    return [entry.path for entry in os.scandir(folder) if (entry.is_file() and os.path.splitext(entry.name)[1].lower() in types)]



def add_markers_file():
    global markers_path
    markers_path = app.getOpenFileName("Select markers file",filter="*.txt")
    
def import_markers( stripNumber = 0, pairNumber = 0):
    global markers_from_file
    markers_from_file = []
    try:
        with open(markers_path) as file:
            for line in file:
                line = line.split()
                marker = chunk.addMarker()   
                marker.label = line[0]        
                y = float(line[1])
                x  = float(line[2])
                z = float(line[3])
                marker.reference.location = [x,y,z]    
                
                markers_from_file.append([marker.label,x,y,z])
                
    except Exception as e:
        app.messageBox(f"Error during importing markers: {str(e)}")



def select_photos():
    folder = app.getExistingDirectory("Select folder with photos")
    global folder_path
    folder_path = folder
    
def add_photo():
    photos = find_files(folder_path, [".jpg", ".jpeg", ".tif", ".tiff"])
    chunk.addPhotos(photos)
    
def select_crs():
    crs = app.getCoordinateSystem()
    global select_crs
    select_crs = crs
        

    
def add_crs():
    try:
        for camera in chunk.cameras:
            camera.reference.location = select_crs.project(chunk.crs.unproject(camera.reference.location))
            
        

        chunk.crs = select_crs
        chunk.updateTransform()
    except Exception as e:
        app.messageBox(f"Error during adding CRS: {str(e)}")
            
def allign_photos(ui):
    try:
        accuracy = ui.alignAccuracyComboBox.currentText()
        accuracy_to_downscale = {"Highest": 0, "High": 1, "Medium": 2, "Low": 4, "Lowest": 8}
        downscale = accuracy_to_downscale[accuracy]
        generic_preselection = ui.genericPreselectionCheckBox.isChecked()
        reference_preselection = ui.referencePreselectionCheckBox.isChecked()
        reset = ui.resetAlignmentCheckBox.isChecked()
        
        #print(f"accuracy: {accuracy}, downscale: {downscale} generic_preselection: {generic_preselection}, reference_preselection: {reference_preselection}")
        chunk.matchPhotos(downscale=downscale,generic_preselection = generic_preselection, reference_preselection = reference_preselection)
        chunk.alignCameras(reset_alignment = reset)
    except Exception as e:
        app.messageBox(f"Error during aligning photos: {str(e)}")


def build_cloud(ui):
    try:
        quality = ui.cloudQualityComboBox.currentText()
        quality_to_downscale = {"Ultra high": 1, "High": 2, "Medium": 4, "Low": 8, "Lowest": 16}
        downscale = quality_to_downscale[quality]
        chunk.buildDepthMaps(downscale = downscale)
        colors = ui.pointColorsCheckBox.isChecked()
        confidence = ui.pointConfidenceCheckBox.isChecked()
        chunk.buildPointCloud(point_colors=colors, point_confidence=confidence)
        
    
        cloud_path = os.path.join(folder_path, "point_cloud.las")
        chunk.exportPointCloud(cloud_path)
    except Exception as e:
        app.messageBox(f"Error during exporting point cloud: {str(e)}")



def build_model(ui):

    try:
        face_count_option = ui.modelFaceCountComboBox.currentText()
        
        if face_count_option == "Custom":
            custom_face_count = app.getInt("Enter face count")
            if custom_face_count < 1:
                app.messageBox("Face count must be greater than 1")
                return 
            face_count = custom_face_count  
            chunk.buildModel(face_count=Metashape.FaceCount.CustomFaceCount, face_count_custom=face_count)
        else:
            face_count_to_value = {
                "High": Metashape.FaceCount.HighFaceCount,
                "Medium": Metashape.FaceCount.MediumFaceCount,
                "Low": Metashape.FaceCount.LowFaceCount
            }
            face_count = face_count_to_value[face_count_option]
            chunk.buildModel(face_count=face_count)
            
        model_path = os.path.join(folder_path, "model.obj")
        chunk.exportModel(model_path)
    except Exception as e:
        app.messageBox(f"Error during building model: {str(e)}")

def detect_markers():
    try:
        marker_type = Metashape.TargetType.CrossTarget
        chunk.detectMarkers(marker_type, tolerance=0)
    except Exception as e:
        app.messageBox(f"Error during detecting markers: {str(e)}")

def calculate_marker_positions():
    try:
        if chunk.transform.matrix is None:
            app.messageBox("Chunk does not have a transform matrix. Align the chunk first.")
            return
    
        transform_matrix = chunk.transform.matrix

        for marker in chunk.markers:
            #print(chunk.crs.project(chunk.transform.matrix.mulp(marker.position)))
            calculated_coords = chunk.crs.project(transform_matrix.mulp(marker.position))
            marker.reference.location = calculated_coords

        chunk.updateTransform()
    except Exception as e:
        app.messageBox(f"Error during calculating marker positions: {str(e)}")
        
def remove_markers():
    global markers_to_remove
    markers_to_remove = []
    
    try:
        for marker in chunk.markers:
            marker_position = marker.reference.location
            matched=False
            for file_marker in markers_from_file:
                
                x_diff = abs(marker_position[0] - file_marker[1])
                y_diff = abs(marker_position[1] - file_marker[2])
                z_diff = abs(marker_position[2] - file_marker[3])
                
                
                if x_diff < 0.5 and y_diff < 0.5 and z_diff < 0.5:
                    #marker.reference.location = [float(file_marker[1]), float(file_marker[2]), float(file_marker[3])]
                    matched=True
                    break
                
            if matched == False:
                markers_to_remove.append(marker)

            
            
        #app.messageBox(f"Markers to remove: {', '.join(marker.label for marker in markers_to_remove)}")        
        for marker in markers_to_remove:
            chunk.remove(marker)
            
        chunk.updateTransform()
    except Exception as e:
        app.messageBox(f"Error during removing markers: {str(e)}")
 
def export_camera_orientations():
    try:
        chunk.updateTransform()
        chunk.optimizeCameras()
    
        output_file = os.path.join(folder_path, "camera_orientations.txt")
        chunk.exportReference(path=output_file, format=Metashape.ReferenceFormat.ReferenceFormatCSV, items=Metashape.ReferenceItems.ReferenceItemsCameras, columns='nxyzabc',
        delimiter=' ', precision=6)

                    
    except Exception as e:
        app.messageBox(f"Error during optimizing cameras: {str(e)}")
        
def do_all(ui):
    try:
        add_photo()
        add_crs()
        allign_photos(ui)
        build_cloud(ui)
        build_model(ui)

    except Exception as e:
        app.messageBox(f"Error during processing: {str(e)}")      
        
def do_all_for_4(ui):
    try:
        chunk.updateTransform()
        detect_markers()
        calculate_marker_positions()    
        remove_markers() 
        chunk.updateTransform()
        allign_photos(ui)
        export_camera_orientations()
    except Exception as e:
        app.messageBox(f"Error during processing: {str(e)}")

              
class Ui_Wizard(object):
    def setupUi(self, Wizard):
        Wizard.setObjectName("Wizard")
        Wizard.resize(654, 330)
        
        self.addPhotosButton = QtWidgets.QPushButton(parent=Wizard)
        self.addPhotosButton.setGeometry(QtCore.QRect(20, 20, 191, 24))
        self.addPhotosButton.setObjectName("addPhotosButton")
        self.addPhotosButton.clicked.connect(select_photos)
        
        self.addMarkersButton = QtWidgets.QPushButton(parent=Wizard)
        self.addMarkersButton.setGeometry(QtCore.QRect(230, 20, 191, 24))
        self.addMarkersButton.setObjectName("addMarkersButton")
        self.addMarkersButton.clicked.connect(add_markers_file)
        
        
        self.alignPhotosgroupBox = QtWidgets.QGroupBox(parent=Wizard)
        self.alignPhotosgroupBox.setGeometry(QtCore.QRect(10, 70, 191, 141))
        self.alignPhotosgroupBox.setObjectName("alignPhotosgroupBox")
        self.label_2 = QtWidgets.QLabel(parent=self.alignPhotosgroupBox)
        self.label_2.setGeometry(QtCore.QRect(30, 20, 49, 16))
        self.label_2.setObjectName("label_2")
        self.alignAccuracyComboBox = QtWidgets.QComboBox(parent=self.alignPhotosgroupBox)
        self.alignAccuracyComboBox.setGeometry(QtCore.QRect(90, 20, 91, 22))
        self.alignAccuracyComboBox.setObjectName("alignAccuracyComboBox")
        self.alignAccuracyComboBox.addItem("")
        self.alignAccuracyComboBox.addItem("")
        self.alignAccuracyComboBox.addItem("")
        self.alignAccuracyComboBox.addItem("")
        self.alignAccuracyComboBox.addItem("")
        self.genericPreselectionCheckBox = QtWidgets.QCheckBox(parent=self.alignPhotosgroupBox)
        self.genericPreselectionCheckBox.setGeometry(QtCore.QRect(30, 40, 131, 20))
        self.genericPreselectionCheckBox.setObjectName("genericPreselectionCheckBox")
        self.genericPreselectionCheckBox.setChecked(True)
        self.referencePreselectionCheckBox = QtWidgets.QCheckBox(parent=self.alignPhotosgroupBox)
        self.referencePreselectionCheckBox.setGeometry(QtCore.QRect(30, 60, 151, 21))
        self.referencePreselectionCheckBox.setObjectName("referencePreselectionCheckBox")
        self.referencePreselectionCheckBox.setChecked(True)
        self.resetAlignmentCheckBox = QtWidgets.QCheckBox(parent=self.alignPhotosgroupBox)
        self.resetAlignmentCheckBox.setGeometry(QtCore.QRect(30, 80, 171, 20))
        self.resetAlignmentCheckBox.setObjectName("resetAlignmentCheckBox")
        
        self.crsButton = QtWidgets.QPushButton(parent=Wizard)
        self.crsButton.setGeometry(QtCore.QRect(440, 20, 191, 24))
        self.crsButton.setObjectName("crsButton")
        self.crsButton.clicked.connect(select_crs)
        
                
        self.cloudGroupBox = QtWidgets.QGroupBox(parent=Wizard)
        self.cloudGroupBox.setGeometry(QtCore.QRect(230, 70, 191, 141))
        self.cloudGroupBox.setObjectName("cloudGroupBox")
        self.label_4 = QtWidgets.QLabel(parent=self.cloudGroupBox)
        self.label_4.setGeometry(QtCore.QRect(20, 20, 49, 16))
        self.label_4.setObjectName("label_4")
        self.cloudQualityComboBox = QtWidgets.QComboBox(parent=self.cloudGroupBox)
        self.cloudQualityComboBox.setGeometry(QtCore.QRect(80, 20, 91, 22))
        self.cloudQualityComboBox.setObjectName("cloudQualityComboBox")
        self.cloudQualityComboBox.addItem("")
        self.cloudQualityComboBox.addItem("")
        self.cloudQualityComboBox.addItem("")
        self.cloudQualityComboBox.addItem("")
        self.cloudQualityComboBox.addItem("")
        self.pointColorsCheckBox = QtWidgets.QCheckBox(parent=self.cloudGroupBox)
        self.pointColorsCheckBox.setGeometry(QtCore.QRect(20, 50, 151, 20))
        self.pointColorsCheckBox.setObjectName("pointColorsCheckBox")
        self.pointColorsCheckBox.setChecked(True)
        self.pointConfidenceCheckBox = QtWidgets.QCheckBox(parent=self.cloudGroupBox)
        self.pointConfidenceCheckBox.setGeometry(QtCore.QRect(20, 70, 171, 20))
        self.pointConfidenceCheckBox.setObjectName("pointConfidenceCheckBox")
        
        
        self.modelGroupBox = QtWidgets.QGroupBox(parent=Wizard)
        self.modelGroupBox.setGeometry(QtCore.QRect(440, 70, 191, 141))
        self.modelGroupBox.setObjectName("modelGroupBox")
        self.label_7 = QtWidgets.QLabel(parent=self.modelGroupBox)
        self.label_7.setGeometry(QtCore.QRect(20, 20, 61, 16))
        self.label_7.setObjectName("label_7")
        self.modelFaceCountComboBox = QtWidgets.QComboBox(parent=self.modelGroupBox)
        self.modelFaceCountComboBox.setGeometry(QtCore.QRect(90, 20, 68, 22))
        self.modelFaceCountComboBox.setObjectName("modelFaceCountComboBox")
        self.modelFaceCountComboBox.addItem("")
        self.modelFaceCountComboBox.addItem("")
        self.modelFaceCountComboBox.addItem("")
        self.modelFaceCountComboBox.addItem("")
        

        
        self.pushButton_2 = QtWidgets.QPushButton(parent=Wizard)
        self.pushButton_2.setGeometry(QtCore.QRect(260, 230, 131, 24))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: do_all(self))
        
        self.markersMeasuredButton = QtWidgets.QPushButton(parent=Wizard)
        self.markersMeasuredButton.setGeometry(QtCore.QRect(250, 260, 151, 24))
        self.markersMeasuredButton.setObjectName("markersMeasuredButton")
        self.markersMeasuredButton.clicked.connect(import_markers)
        
        
        self.doall4Button = QtWidgets.QPushButton(parent=Wizard)
        self.doall4Button.setGeometry(QtCore.QRect(260, 290, 131, 24))
        self.doall4Button.setObjectName("doall4Button")
        self.doall4Button.clicked.connect(lambda: do_all_for_4(self))


        self.retranslateUi(Wizard)
        QtCore.QMetaObject.connectSlotsByName(Wizard)

    def retranslateUi(self, Wizard):
        _translate = QtCore.QCoreApplication.translate
        Wizard.setWindowTitle(_translate("Wizard", "Dialog"))
        self.addPhotosButton.setText(_translate("Wizard", "Select Photos Directory"))
        self.addMarkersButton.setText(_translate("Wizard", "Select Markers File"))
        self.alignPhotosgroupBox.setTitle(_translate("Wizard", "Align Photos"))
        self.label_2.setText(_translate("Wizard", "Accuracy"))
        self.alignAccuracyComboBox.setItemText(0, _translate("Wizard", "Highest"))
        self.alignAccuracyComboBox.setItemText(1, _translate("Wizard", "High"))
        self.alignAccuracyComboBox.setItemText(2, _translate("Wizard", "Medium"))
        self.alignAccuracyComboBox.setItemText(3, _translate("Wizard", "Low"))
        self.alignAccuracyComboBox.setItemText(4, _translate("Wizard", "Lowest"))
        self.genericPreselectionCheckBox.setText(_translate("Wizard", "Generic preselection"))
        self.referencePreselectionCheckBox.setText(_translate("Wizard", "Reference preselection"))
        self.resetAlignmentCheckBox.setText(_translate("Wizard", "Reset current alignment"))
        
        self.crsButton.setText(_translate("Wizard", "Select CRS for Markers File"))

        self.cloudGroupBox.setTitle(_translate("Wizard", "Point Cloud"))
        self.label_4.setText(_translate("Wizard", "Quality"))
        self.cloudQualityComboBox.setItemText(0, _translate("Wizard", "Ultra high"))
        self.cloudQualityComboBox.setItemText(1, _translate("Wizard", "High"))
        self.cloudQualityComboBox.setItemText(2, _translate("Wizard", "Medium"))
        self.cloudQualityComboBox.setItemText(3, _translate("Wizard", "Low"))
        self.cloudQualityComboBox.setItemText(4, _translate("Wizard", "Lowest"))
        self.pointColorsCheckBox.setText(_translate("Wizard", "Calculate point colors"))
        self.pointConfidenceCheckBox.setText(_translate("Wizard", "Calculate point confidence"))
        self.modelGroupBox.setTitle(_translate("Wizard", "Model"))
        self.label_7.setText(_translate("Wizard", "Face count"))
        self.modelFaceCountComboBox.setItemText(0, _translate("Wizard", "High"))
        self.modelFaceCountComboBox.setItemText(1, _translate("Wizard", "Medium"))
        self.modelFaceCountComboBox.setItemText(2, _translate("Wizard", "Low"))
        self.modelFaceCountComboBox.setItemText(3, _translate("Wizard", "Custom"))

        self.pushButton_2.setText(_translate("Wizard", "Do all for 3"))
        
        self.markersMeasuredButton.setText(_translate("Wizard", "Start measuring markers"))
        
        self.doall4Button.setText(_translate("Wizard", "Do all for 4"))



def wizard():
    try:
        app = QtWidgets.QApplication(sys.argv)
        Wizard = QtWidgets.QDialog()
        ui = Ui_Wizard()
        ui.setupUi(Wizard)
        Wizard.show()
        app.exec()
    except Exception as e:
        app.messageBox(f"Error during running wizard: {str(e)}")
    
if __name__ == "__main__":

    Metashape.app.removeMenuItem("Wizard")
    Metashape.app.addMenuItem("Wizard",wizard )


